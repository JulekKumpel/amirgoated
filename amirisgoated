-- Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local StarterGui = game:GetService("StarterGui")
local HttpService = game:GetService("HttpService")
local Lighting = game:GetService("Lighting")

-- Load Rayfield Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create Window
local Window = Rayfield:CreateWindow({
   Name = "wiercipieta Reach",
   Icon = "target", -- Lucide target icon
   LoadingTitle = "wiercipieta Reach System",
   LoadingSubtitle = "BEST WAY TO WIN",
   Theme = "Default",
   ToggleUIKeybind = "K",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = "wiercipieta",
      FileName = "ReachSettings"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false,
})

-- LocalPlayer and Character
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HRP = Character:WaitForChild("HumanoidRootPart")

-- Ball detection
local BallsFolder = Workspace:FindFirstChild("Balls", true)
local NO_FOLDER = false
local _BALLS = {}
if not BallsFolder then
    NO_FOLDER = true
    for _, child in pairs(Workspace:GetChildren()) do
        if child.Name == "fakeBaIlExpIoiter" or child.Name == "fakeBall" or child.Name == "MPS" or child.Name == "TPS" or child.Name == "CSF" or child.Name == "VFL" or child.Name == "lￃﾌￂﾸￃﾌ￢ﾀﾝￃﾌￂﾼilￃﾌￂﾷￃﾌ￢ﾀﾦￃﾍￅﾽiￃﾌￂﾴￃﾍￋﾜￃﾌￂﾰiIￃﾌￂﾷￃﾍ￢ﾀﾞￃﾌ￢ﾄﾢilￃﾌￂﾶￃﾍ￢ﾀﾞￃﾌￂﾼilￃﾌￂﾴￃﾌ￢ﾀﾢￃﾌￋﾜIￃﾌￂﾵￃﾌￆﾒￃﾌￂﾹiￃﾌￂﾴￃﾌￅﾒￃﾌￂﾨ" then
            table.insert(_BALLS, child)
        end
    end
end

-- Reach Box Setup
local function createReachBox(name, color)
    local box = Instance.new("Part")
    box.Name = name
    box.Size = Vector3.new(10, 10, 10)
    box.CFrame = CFrame.new(math.huge, math.huge, math.huge)
    box.Anchored = true
    box.CanCollide = false
    box.CanTouch = true
    box.CanQuery = false
    box.Massless = true
    box.Transparency = 1
    box.Color = color
    box.Parent = Workspace
    box.AncestryChanged:Connect(function(_, parent)
        if not parent then
            box.Parent = Workspace
        end
    end)
    return box
end

local DribbleBox = createReachBox("DribbleBox", Color3.fromRGB(255, 0, 0))

-- Control variables
local DribbleSettings = { 
    isEnabled = true, 
    reachX = 10, 
    reachY = 10, 
    reachZ = 10, 
    offsetX = 0, 
    offsetY = 0, 
    offsetZ = 0, 
    transparency = 0.9, 
    visible = true 
}

-- Save and load settings
local function saveSettings()
    local data = {
        Dribble = DribbleSettings
    }
    local json = HttpService:JSONEncode(data)
    if writefile then
        writefile("wiercipieta_reach_settings.json", json)
    end
end

local function loadSettings()
    if isfile and isfile("wiercipieta_reach_settings.json") and readfile then
        local json = readfile("wiercipieta_reach_settings.json")
        local data = HttpService:JSONDecode(json)
        DribbleSettings = data.Dribble or DribbleSettings
        DribbleSettings.offsetX = DribbleSettings.offsetX or 0
    end
end

loadSettings()

-- Update reach box properties
local function updateReachBox(box, settings)
    if box then
        box.Size = Vector3.new(settings.reachX, settings.reachY, settings.reachZ)
        box.Transparency = settings.visible and settings.transparency or 1
        if settings.visible then
            box.CFrame = HRP and HRP.CFrame * CFrame.new(settings.offsetX, settings.offsetY, settings.offsetZ) or CFrame.new(math.huge, math.huge, math.huge)
        else
            box.CFrame = CFrame.new(math.huge, math.huge, math.huge)
        end
    end
end

-- Main loop for ball interaction
local heartbeatConnection
local function startHeartbeat()
    if heartbeatConnection then
        heartbeatConnection:Disconnect()
    end
    heartbeatConnection = RunService.Heartbeat:Connect(function()
        local settings = DribbleSettings
        local box = DribbleBox
        if settings.isEnabled and HRP and Character and box then
            box.CFrame = HRP.CFrame * CFrame.new(settings.offsetX, settings.offsetY, settings.offsetZ)
            local overlapParams = OverlapParams.new()
            overlapParams.FilterType = Enum.RaycastFilterType.Include
            overlapParams.FilterDescendantsInstances = NO_FOLDER and {_BALLS} or {BallsFolder}
            local touchingBalls = Workspace:GetPartsInPart(box, overlapParams)
            table.sort(touchingBalls, function(a, b)
                return (a.Position - HRP.Position).Magnitude < (b.Position - HRP.Position).Magnitude
            end)
            if #touchingBalls > 0 then
                local ball = touchingBalls[1]
                for _, limb in pairs(Character:GetChildren()) do
                    if limb:IsA("Part") then
                        pcall(function()
                            firetouchinterest(limb, ball, 0)
                            firetouchinterest(limb, ball, 1)
                        end)
                    end
                end
            end
        end
    end)
end

-- Handle ball additions/removals if NO_FOLDER
if NO_FOLDER then
    Workspace.ChildAdded:Connect(function(child)
        if child.Name == "fakeBaIlExpIoiter" or child.Name == "fakeBall" or child.Name == "MPS" or child.Name == "TPS" or child.Name == "CSF" or child.Name == "VFL" or child.Name == "lￃﾌￂﾸￃﾌ￢ﾀﾝￃﾌￂﾼilￃﾌￂﾷￃﾌ￢ﾀﾦￃﾍￅﾽiￃﾌￂﾴￃﾍￋﾜￃﾌￂﾰiIￃﾌￂﾷￃﾍ￢ﾀﾞￃﾌ￢ﾄﾢilￃﾌￂﾶￃﾍ￢ﾀﾞￃﾌￂﾼilￃﾌￂﾴￃﾌ￢ﾀﾢￃﾌￋﾜIￃﾌￂﾵￃﾌￆﾒￃﾌￂﾹiￃﾌￂﾴￃﾌￅﾒￃﾌￂﾨ" then
            table.insert(_BALLS, child)
        end
    end)
    Workspace.ChildRemoved:Connect(function(child)
        for i, ball in pairs(_BALLS) do
            if ball == child then
                table.remove(_BALLS, i)
                break
            end
        end
    end)
end

-- Handle CharacterAdded
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    Character = newCharacter
    HRP = Character:WaitForChild("HumanoidRootPart")
    if not DribbleBox then
        DribbleBox = createReachBox("DribbleBox", Color3.fromRGB(255, 0, 0))
    end
    updateReachBox(DribbleBox, DribbleSettings)
    if DribbleSettings.isEnabled then
        startHeartbeat()
    end
end)

-- Initial setup
if not DribbleBox then
    DribbleBox = createReachBox("DribbleBox", Color3.fromRGB(255, 0, 0))
end
updateReachBox(DribbleBox, DribbleSettings)
if DribbleSettings.isEnabled then
    startHeartbeat()
end

-- Create Main Tab
local MainTab = Window:CreateTab("Reach Settings", "target")

-- Create Section for Dribble Settings
local DribbleSection = MainTab:CreateSection("Dribble Reach Settings")

-- Enable/Disable Toggle
local EnableToggle = MainTab:CreateToggle({
    Name = "Enable Dribble Reach",
    CurrentValue = DribbleSettings.isEnabled,
    Flag = "EnableDribble",
    Callback = function(Value)
        DribbleSettings.isEnabled = Value
        if Value then
            startHeartbeat()
        else
            if heartbeatConnection then
                heartbeatConnection:Disconnect()
            end
        end
        saveSettings()
    end,
})

-- Visibility Toggle
local VisibilityToggle = MainTab:CreateToggle({
    Name = "Box Visible",
    CurrentValue = DribbleSettings.visible,
    Flag = "BoxVisible",
    Callback = function(Value)
        DribbleSettings.visible = Value
        updateReachBox(DribbleBox, DribbleSettings)
        saveSettings()
    end,
})

-- Reach Size Sliders
local ReachXSlider = MainTab:CreateSlider({
    Name = "Reach X Size",
    Range = {0, 25},
    Increment = 1,
    Suffix = "studs",
    CurrentValue = DribbleSettings.reachX,
    Flag = "ReachX",
    Callback = function(Value)
        DribbleSettings.reachX = Value
        updateReachBox(DribbleBox, DribbleSettings)
        saveSettings()
    end,
})

local ReachYSlider = MainTab:CreateSlider({
    Name = "Reach Y Size",
    Range = {0, 25},
    Increment = 1,
    Suffix = "studs",
    CurrentValue = DribbleSettings.reachY,
    Flag = "ReachY",
    Callback = function(Value)
        DribbleSettings.reachY = Value
        updateReachBox(DribbleBox, DribbleSettings)
        saveSettings()
    end,
})

local ReachZSlider = MainTab:CreateSlider({
    Name = "Reach Z Size",
    Range = {0, 25},
    Increment = 1,
    Suffix = "studs",
    CurrentValue = DribbleSettings.reachZ,
    Flag = "ReachZ",
    Callback = function(Value)
        DribbleSettings.reachZ = Value
        updateReachBox(DribbleBox, DribbleSettings)
        saveSettings()
    end,
})

-- Offset Sliders
local OffsetXSlider = MainTab:CreateSlider({
    Name = "Offset X",
    Range = {-10, 10},
    Increment = 0.5,
    Suffix = "studs",
    CurrentValue = DribbleSettings.offsetX,
    Flag = "OffsetX",
    Callback = function(Value)
        DribbleSettings.offsetX = Value
        updateReachBox(DribbleBox, DribbleSettings)
        saveSettings()
    end,
})

local OffsetYSlider = MainTab:CreateSlider({
    Name = "Offset Y",
    Range = {-10, 10},
    Increment = 0.5,
    Suffix = "studs",
    CurrentValue = DribbleSettings.offsetY,
    Flag = "OffsetY",
    Callback = function(Value)
        DribbleSettings.offsetY = Value
        updateReachBox(DribbleBox, DribbleSettings)
        saveSettings()
    end,
})

local OffsetZSlider = MainTab:CreateSlider({
    Name = "Offset Z",
    Range = {-10, 10},
    Increment = 0.5,
    Suffix = "studs",
    CurrentValue = DribbleSettings.offsetZ,
    Flag = "OffsetZ",
    Callback = function(Value)
        DribbleSettings.offsetZ = Value
        updateReachBox(DribbleBox, DribbleSettings)
        saveSettings()
    end,
})

-- Transparency Slider
local TransparencySlider = MainTab:CreateSlider({
    Name = "Box Transparency",
    Range = {0, 1},
    Increment = 0.1,
    Suffix = "",
    CurrentValue = DribbleSettings.transparency,
    Flag = "Transparency",
    Callback = function(Value)
        DribbleSettings.transparency = Value
        updateReachBox(DribbleBox, DribbleSettings)
        saveSettings()
    end,
})

-- Create Info Tab
local InfoTab = Window:CreateTab("Information", "info")

-- Info Section
local InfoSection = InfoTab:CreateSection("About wiercipieta Reach")

-- Info Paragraph
local InfoParagraph = InfoTab:CreateParagraph({
    Title = "wiercipieta Reach System",
    Content = "BEST WAY TO WIN\n\nThis script provides enhanced reach capabilities for ball games. The reach box will automatically interact with nearby balls when enabled."
})

-- Instructions Section
local InstructionsSection = InfoTab:CreateSection("Instructions")

local InstructionsParagraph = InfoTab:CreateParagraph({
    Title = "How to Use",
    Content = "1. Enable the reach system using the toggle\n2. Adjust the reach size to your preference\n3. Set offsets to position the box correctly\n4. Toggle visibility to see/hide the reach box\n5. Press K to hide/show the interface"
})

-- Credits Section
local CreditsSection = InfoTab:CreateTab("Credits", "heart")

local CreditsParagraph = CreditsTab:CreateParagraph({
    Title = "Credits",
    Content = "wiercipieta Reach System\n\nBuilt with Rayfield UI Library\nBEST WAY TO WIN"
})

-- Create a button to reset settings
local ResetButton = MainTab:CreateButton({
    Name = "Reset to Default Settings",
    Callback = function()
        DribbleSettings = {
            isEnabled = true,
            reachX = 10,
            reachY = 10,
            reachZ = 10,
            offsetX = 0,
            offsetY = 0,
            offsetZ = 0,
            transparency = 0.9,
            visible = true
        }
        
        -- Update all UI elements
        EnableToggle:Set(DribbleSettings.isEnabled)
        VisibilityToggle:Set(DribbleSettings.visible)
        ReachXSlider:Set(DribbleSettings.reachX)
        ReachYSlider:Set(DribbleSettings.reachY)
        ReachZSlider:Set(DribbleSettings.reachZ)
        OffsetXSlider:Set(DribbleSettings.offsetX)
        OffsetYSlider:Set(DribbleSettings.offsetY)
        OffsetZSlider:Set(DribbleSettings.offsetZ)
        TransparencySlider:Set(DribbleSettings.transparency)
        
        updateReachBox(DribbleBox, DribbleSettings)
        if DribbleSettings.isEnabled then
            startHeartbeat()
        end
        saveSettings()
        
        Rayfield:Notify({
            Title = "Settings Reset",
            Content = "All settings have been reset to default values.",
            Duration = 3,
            Image = "check-circle",
        })
    end,
})

-- Send notification when loaded
wait(1)
Rayfield:Notify({
    Title = "wiercipieta Reach Loaded",
    Content = "Best way to win! Press K to toggle UI.",
    Duration = 5,
    Image = "target",
})

-- Final initialization
updateReachBox(DribbleBox, DribbleSettings)
if DribbleSettings.isEnabled then
    startHeartbeat()
end
